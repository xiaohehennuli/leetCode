// 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。

// 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。

// 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

// 示例 1：

// 输入：nums = [3,2,2,3], val = 3
// 输出：2, nums = [2,2]
// 解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。
//你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。

// 来源：力扣（LeetCode）
// 链接：https://leetcode-cn.com/problems/remove-element
// 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

// 解题思路双指针法，快慢指针，快指针再前面判断元素，慢指针接受不等于val的值，并赋予

const arr = [1, 1, 0, 0, 3, 1, 2]

function search(arr, target) {
  //第一步定义慢指针
  let k = 0
  // 快指针开始循环
  for (let i = 0; i <= arr.length - 1; i++) {
    //判断快指针当前值是否等于目标值,不等于则把它赋给慢指针
    if (arr[i] !== target) {
      //arr[k++] = arr[i]  简便写法，先赋值,k再加加
      arr[k] = arr[i]
      k++
    }
  }
  return k
}

console.log(search(arr, 1))
